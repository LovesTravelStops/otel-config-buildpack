{
  "config_sources": {
    "env": {
      "defaults": {
        "HEROKU_DYNO_ID": "unset",
        "HEROKU_APP_ID": "unset",
        "HEROKU_APP_NAME": "unset"
      }
    }
  },
  "extensions": {
    "health_check": { "endpoint": "0.0.0.0:13133" },
    "http_forwarder": {
      "ingress": { "endpoint": "0.0.0.0:6060" },
      "egress": { "endpoint": "${SPLUNK_API_URL}" }
    },
    "zpages": null
  },
  "receivers": {
    "jaeger": {
      "protocols": {
        "grpc": { "endpoint": "0.0.0.0:14250" },
        "thrift_binary": { "endpoint": "0.0.0.0:6832" },
        "thrift_compact": { "endpoint": "0.0.0.0:6831" },
        "thrift_http": { "endpoint": "0.0.0.0:14268" }
      }
    },
    "otlp": {
      "protocols": {
        "grpc": { "endpoint": "0.0.0.0:4317" },
        "http": { "endpoint": "0.0.0.0:4318" }
      }
    },
    "prometheus/internal": {
      "config": {
        "scrape_configs": [
          {
            "job_name": "otel-collector",
            "scrape_interval": "10s",
            "static_configs": [{ "targets": ["0.0.0.0:8888"] }],
            "metric_relabel_configs": [
              {
                "source_labels": ["__name__"],
                "regex": ".*grpc_io.*",
                "action": "drop"
              }
            ]
          }
        ]
      }
    },
    "signalfx": { "endpoint": "0.0.0.0:9943" },
    "zipkin": { "endpoint": "0.0.0.0:9411" }
  },
  "processors": {
    "batch": null,
    "memory_limiter": {
      "ballast_size_mib": "${SPLUNK_BALLAST_SIZE_MIB}",
      "check_interval": "2s",
      "limit_mib": "${SPLUNK_MEMORY_LIMIT_MIB}"
    },
    "attributes/heroku": {
      "actions": [
        {
          "action": "insert",
          "key": "dyno_id",
          "value": "${env:HEROKU_DYNO_ID}"
        },
        {
          "action": "insert",
          "key": "app_id",
          "value": "${env:HEROKU_APP_ID}"
        },
        {
          "action": "insert",
          "key": "app_name",
          "value": "${env:HEROKU_APP_NAME}"
        }
      ]
    },
    "attributes/update": {
      "actions": [
        { "key": "db.connection_string", "action": "delete" },
        {
          "key": "service.version",
          "action": "insert",
          "value": "${env:HEROKU_SLUG_COMMIT}"
        },
        {
          "key": "heroku.dyno.name",
          "action": "insert",
          "value": "${env:DYNO}"
        },
        {
          "key": "heroku.dyno.name",
          "action": "extract",
          "pattern": "^(?P<dyno_type>[^.]+)"
        },
        {
          "key": "heroku.release.description",
          "action": "insert",
          "value": "${env:HEROKU_SLUG_DESCRIPTION}"
        },
        {
          "key": "heroku.release.version",
          "action": "insert",
          "value": "${env:HEROKU_RELEASE_VERSION}"
        }
      ]
    },
    "filter": {
      "traces": {
        "span": ["IsMatch(attributes[\"db.statement\"], \".*XREAD.*\") == true"]
      }
    },
    "metricstransform/heroku": {
      "transforms": [
        {
          "include": ".*",
          "match_type": "regexp",
          "action": "update",
          "operations": [
            {
              "action": "add_label",
              "new_label": "dyno_id",
              "new_value": "${env:HEROKU_DYNO_ID}"
            },
            {
              "action": "add_label",
              "new_label": "app_id",
              "new_value": "${env:HEROKU_APP_ID}"
            },
            {
              "action": "add_label",
              "new_label": "app_name",
              "new_value": "${env:HEROKU_APP_NAME}"
            },
            {
              "action": "add_label",
              "new_label": "dyno.name",
              "new_value": "${env:DYNO}"
            },
            {
              "action": "add_label",
              "new_label": "release.description",
              "new_value": "${env:HEROKU_SLUG_DESCRIPTION}"
            },
            {
              "action": "add_label",
              "new_label": "release.version",
              "new_value": "${env:HEROKU_RELEASE_VERSION}"
            }
          ]
        }
      ]
    }
  },
  "exporters": {
    "sapm": {
      "access_token": "${SPLUNK_ACCESS_TOKEN}",
      "endpoint": "${SPLUNK_TRACE_URL}"
    },
    "signalfx": {
      "access_token": "${SPLUNK_ACCESS_TOKEN}",
      "api_url": "${SPLUNK_API_URL}",
      "ingest_url": "${SPLUNK_INGEST_URL}"
    },
    "splunk_hec/profiling": {
      "token": "${SPLUNK_ACCESS_TOKEN}",
      "endpoint": "${SPLUNK_PROFILING_URL}"
    },
    "logging": { "loglevel": "debug" }
  },
  "service": {
    "extensions": ["health_check", "http_forwarder", "zpages"],
    "pipelines": {
      "traces": {
        "receivers": ["jaeger", "otlp", "zipkin"],
        "processors": [
          "memory_limiter",
          "batch",
          "attributes/heroku",
          "attributes/update",
          "filter"
        ],
        "exporters": ["sapm", "signalfx"]
      },
      "metrics": {
        "receivers": ["otlp", "signalfx"],
        "processors": ["memory_limiter", "batch", "metricstransform/heroku"],
        "exporters": ["signalfx"]
      },
      "metrics/internal": {
        "receivers": ["prometheus/internal"],
        "processors": ["memory_limiter", "batch", "metricstransform/heroku"],
        "exporters": ["signalfx"]
      },
      "logs/profiling": {
        "receivers": ["otlp"],
        "processors": ["memory_limiter", "batch", "attributes/heroku"],
        "exporters": ["splunk_hec/profiling"]
      }
    }
  }
}
